#!/bin/bash

# Status Check Script Template for PakProperty App
# This script checks the status of the deployed application
#
# IMPORTANT: Before using this script:
# 1. Copy this file to check-status.sh
# 2. Update the server configuration below with your actual server details
# 3. This template file is safe to commit to version control

# Server Configuration - UPDATE THESE VALUES
SERVER_IP="YOUR_SERVER_IP"
SERVER_USER="YOUR_SERVER_USER"
SERVER_PASSWORD="YOUR_SERVER_PASSWORD"
DOMAIN="YOUR_DOMAIN"
SUBDOMAIN="YOUR_SUBDOMAIN"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}  PakProperty Status Check${NC}"
    echo -e "${BLUE}================================${NC}"
}

# Function to execute remote commands
execute_remote() {
    sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no "$SERVER_USER@$SERVER_IP" "$1"
}

print_header

# Check server connectivity
print_status "Checking server connectivity..."
if execute_remote "echo 'Connection successful'" &> /dev/null; then
    print_status "‚úÖ Server is reachable"
else
    print_error "‚ùå Cannot connect to server"
    exit 1
fi

# Check Docker services
print_status "Checking Docker services..."
SERVICES_STATUS=$(execute_remote "cd /opt/pakproperty && docker-compose ps --format 'table {{.Name}}\t{{.Status}}\t{{.Ports}}'")
if [ $? -eq 0 ]; then
    print_status "‚úÖ Docker services status:"
    echo "$SERVICES_STATUS"
else
    print_error "‚ùå Failed to get Docker services status"
fi

# Check if services are running
RUNNING_SERVICES=$(execute_remote "cd /opt/pakproperty && docker-compose ps | grep -c 'Up'")
if [ "$RUNNING_SERVICES" -eq 4 ]; then
    print_status "‚úÖ All 4 services are running (MongoDB, MongoDB Express, Server, Client)"
elif [ "$RUNNING_SERVICES" -gt 0 ]; then
    print_warning "‚ö†Ô∏è  Only $RUNNING_SERVICES out of 4 services are running"
else
    print_error "‚ùå No services are running"
fi

# Check application endpoints
print_status "Checking application endpoints..."

# Check frontend
if execute_remote "curl -f http://localhost:3000" &> /dev/null; then
    print_status "‚úÖ Frontend is accessible on port 3000"
else
    print_error "‚ùå Frontend is not accessible on port 3000"
fi

# Check backend API
if execute_remote "curl -f http://localhost:5001/api/health" &> /dev/null; then
    print_status "‚úÖ Backend API is accessible on port 5001"
else
    print_error "‚ùå Backend API is not accessible on port 5001"
fi

# Check MongoDB Express
if execute_remote "curl -f http://localhost:8081" &> /dev/null; then
    print_status "‚úÖ MongoDB Express is accessible on port 8081"
else
    print_error "‚ùå MongoDB Express is not accessible on port 8081"
fi

# Check Nginx
print_status "Checking Nginx status..."
if execute_remote "systemctl is-active nginx" | grep -q "active"; then
    print_status "‚úÖ Nginx is running"
else
    print_error "‚ùå Nginx is not running"
fi

# Check SSL certificate
print_status "Checking SSL certificate..."
if execute_remote "certbot certificates | grep -A 5 '$SUBDOMAIN.$DOMAIN'" &> /dev/null; then
    print_status "‚úÖ SSL certificate is installed"
else
    print_warning "‚ö†Ô∏è  SSL certificate not found or expired"
fi

# Check disk space
print_status "Checking disk space..."
DISK_USAGE=$(execute_remote "df / | awk 'NR==2 {print \$5}' | sed 's/%//'")
if [ "$DISK_USAGE" -lt 80 ]; then
    print_status "‚úÖ Disk usage: ${DISK_USAGE}%"
else
    print_warning "‚ö†Ô∏è  Disk usage is high: ${DISK_USAGE}%"
fi

# Check memory usage
print_status "Checking memory usage..."
MEMORY_USAGE=$(execute_remote "free | awk 'NR==2{printf \"%.1f\", \$3*100/\$2}'")
if (( $(echo "$MEMORY_USAGE < 80" | bc -l) )); then
    print_status "‚úÖ Memory usage: ${MEMORY_USAGE}%"
else
    print_warning "‚ö†Ô∏è  Memory usage is high: ${MEMORY_USAGE}%"
fi

# Check recent logs
print_status "Checking recent application logs..."
RECENT_LOGS=$(execute_remote "tail -n 5 /opt/pakproperty/logs/monitor.log 2>/dev/null || echo 'No logs found'")
if [ "$RECENT_LOGS" != "No logs found" ]; then
    print_status "‚úÖ Recent logs found"
    echo "$RECENT_LOGS"
else
    print_warning "‚ö†Ô∏è  No recent logs found"
fi

# Check external accessibility
print_status "Checking external accessibility..."
if curl -f -s "https://$SUBDOMAIN.$DOMAIN" &> /dev/null; then
    print_status "‚úÖ Application is accessible externally at https://$SUBDOMAIN.$DOMAIN"
else
    print_error "‚ùå Application is not accessible externally"
fi

print_header
print_status "Status check completed!"
print_status ""
print_status "Access URLs:"
print_status "  üåê Main App: https://$SUBDOMAIN.$DOMAIN"
print_status "  üìä API: https://$SUBDOMAIN.$DOMAIN/api"
print_status "  üóÑÔ∏è  Admin: https://$SUBDOMAIN.$DOMAIN/mongo-express"
print_status ""
print_status "For detailed logs and troubleshooting, see DEPLOYMENT_TEMPLATE.md"
print_header 